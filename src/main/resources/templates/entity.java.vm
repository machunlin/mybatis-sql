package ${package.Entity};

#foreach($pkg in ${table.importPackages})
#if(${pkg} != 'com.baomidou.mybatisplus.annotations.TableField' && ${pkg} != 'com.baomidou.mybatisplus.activerecord.Model')
import ${pkg};
#end
#end
import com.baomidou.mybatisplus.annotations.Version;
import io.swagger.annotations.ApiModelProperty;
import net.vipmro.athena.boot.starter.model.BaseBuilder;
#if(${entityLombokModel})
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;
#end

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @date ${cfg.date}
 */
#if(${entityLombokModel})
@Data
@EqualsAndHashCode(callSuper = true)
@Accessors(chain = true)
#end
#if(${table.convert})
@TableName("${table.name}")
#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#else
public class ${entity} implements Serializable {
#end

    private static final long serialVersionUID = ${cfg.uid};

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
#if($field.propertyName != "id" && $field.propertyName != "createBy" && $field.propertyName != "createByName"&& $field.propertyName != "createAt" && $field.propertyName != "updateBy" && $field.propertyName != "updateByName"&& $field.propertyName != "updateAt")
#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
    @ApiModelProperty(value="${field.comment}")
#end
#if(${field.keyFlag})
## 普通字段
#elseif(${field.fill})
## -----   存在字段填充设置   -----
#elseif(${field.convert})
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
    @Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
#if(${field.propertyName}=="version")
    @Version
#end
    private ${field.propertyType} ${field.propertyName};

#end
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
#foreach($field in ${table.fields})
#if($field.propertyName != "id" && $field.propertyName != "createBy" && $field.propertyName != "createByName"&& $field.propertyName != "createAt" && $field.propertyName != "updateBy" && $field.propertyName != "updateByName"&& $field.propertyName != "updateAt")
#if(${field.propertyType.equals("boolean")})
#set($getprefix="is")
#else
#set($getprefix="get")
#end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

#if(${entityBuilderModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#end
        this.${field.propertyName} = ${field.propertyName};
#if(${entityBuilderModel})
        return this;
#end
    }
#end
#end
#end

#if(${entityColumnConstant})
#foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} = "${field.name}";

#end
#end


    public static class Builder extends BaseBuilder {
#foreach($field in ${table.fields})
        private ${field.propertyType} ${field.propertyName};
#end

        public static Builder create() {
        return new Builder();
    }

        /**
         *  复制初始化
         * @param object object
         * @param ignoreFields ignoreFields
         * @return Builder
         */
        public Builder copyInit(Object object, String... ignoreFields) {
            copyInit(object,this,ignoreFields);
            return this;
        }
#foreach($field in ${table.fields})
        public Builder ${field.propertyName}(${field.propertyType} ${field.propertyName}) {
            this.${field.propertyName} = ${field.propertyName};
            return this;
        }
#end
#set($lowEntity= $entity.substring(0,1).toLowerCase() + $entity.substring(1))
        public ${entity} build(){
            ${entity} $lowEntity = new ${entity}();
#foreach($field in ${table.fields})
#set($setprefix=".set")
            $lowEntity${setprefix}${field.capitalName}(${field.propertyName});
#end
            return $entity.substring(0,1).toLowerCase()$entity.substring(1,$entity.length());
        }
    }

    public static Builder newBuilder(){
        return Builder.create();
    }

#if(!${entityLombokModel})
    @Override
    public String toString() {
        return "${entity}{" +
#foreach($field in ${table.fields})
#if($!{velocityCount}==1)
        "${field.propertyName}=" + ${field.propertyName} +
#else
        ", ${field.propertyName}=" + ${field.propertyName} +
#end
#end
        "}";
    }
#end
}
